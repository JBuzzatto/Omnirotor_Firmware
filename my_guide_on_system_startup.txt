#####** This is a simple guide on the px4 system startup **#####

The system startup is regulated by shell scripts.
For NuttX (mainly the pixhawk series) they are located at:
	Firmware/ROMFS/px4fmu_common/init.d/
For Posix (linux boards as Pi and for sitl build) they are located at:
	Firmware/ROMFS/px4fmu_common/init.d-posix/

The first entry on the system startup is always the script 'rcS', for both NuttX and Posix.
This rcS scripts then call on other scripts. For our interests, we will take a look at the default call hierarchy
for a multicopter (mc) vehicle type.

## 1.1 (posix) Startup scripts call hierarchy for default mc:

	- rcS
	#after built located at: Firmware/build/px4_sitl_default/tmp/rootfs/etc/init.d-posix/
	#before built located at: Firmware/ROMFS/px4fmu_common/init.d-posix/
	#this script is run by the main px4 instance (an executable called px4, that can be found
	#at 'Firmware/build/px4_sitl_default/bin/' after your have built for that target)
	#First thing it does is to run the bash 'px4-alias.sh'. After that, it sets several default system
	#parameters that can be changed afterwords by other scripts.
	#It then runs the script 'sitl_run.sh'
	#It then runs two more scrtipts: rc.vehicle_setup and rc.logging

		- px4-alias.sh
		#after built located at: Firmware/build/px4_sitl_default/bin/ (created)
		#before built located at: Firmware/platforms/posix/src/common/ (template it seems)
		#this script just set the 'px4-' prefix keyword to run the other px4 modules and
		#apps (both also exectables after the system is built)

		- sitl_run.sh
		#after built located at: *not placed at build folder*
		#before built located at: Firmware/Tools/
		#Not going into detail, what it does is it sets the simulator (gazebo for us) and select your model
		#It also probably tells to run your config script for your system, that you must create (check it!!!!)

			- my_model
			#
			#

		- rc.vehicle_setup
		#after built located at: Firmware/build/px4_sitl_default/tmp/rootfs/etc/init.d/ (notice it is also part of NuttX systems)
		#before built located at: Firmware/ROMFS/px4fmu_common/init.d/  (notice it is also part of NuttX systems)
		#First it acess the vehicle type from system parameter 'VEHICLE_TYPE'. On our case it is mc
		#After it sets mav type from system parameter 'MAV_TYPE' or by looking at the mixer used
		#Then it also runs two more scripts: rc.interface and rc.mc_apps

			- rc.interface
			#after built located at: Firmware/build/px4_sitl_default/tmp/rootfs/etc/init.d/ (notice it is also part of NuttX systems)
			#before built located at: Firmware/ROMFS/px4fmu_common/init.d/
			#This script configures control interfaces. It sets several io related system parameters.
			#if the system parameter 'OUTPUT_MODE' is set to 'io' or 'uavcan_esc' or 'IO_PRESENT' is 'yes', then it
			#also runs the 'rc.io' script.
			#It is also responsible for loading the main and aux mixer. If you want to skip it, the system parameter
			# 'MIXER' can be set equal to 'skip'

				- rc.io
				#after built located at: Firmware/build/px4_sitl_default/tmp/rootfs/etc/init.d/ (notice it is also part of NuttX systems)
				#before built located at: Firmware/ROMFS/px4fmu_common/init.d/
				#does not do much. if you are on hil, it blocks control outputs. if you are not, it sets the output frequence
				#and allow midair recovery.

			- rc.mc_apps
			#after built located at: Firmware/build/px4_sitl_default/tmp/rootfs/etc/init.d/ (notice it is also part of NuttX systems)
			#before built located at: Firmware/ROMFS/px4fmu_common/init.d/
			#All it does is select the estimation method (standart is ekf2) and starts it. Then it starts more apps.
			#The apps it starts are:
				* ekf2
				* mc_rate_control
				* mc_att_control
				* mc_pos_control
				* land_detector (multicopter)


		- rc.logging
		# (complete it...)
		# Creates flight log...




## 1.2 (NuttX) Startup scripts call hierarchy for default mc:

	- rcS
	#after built located at: Firmware/build/px4_sitl_default/tmp/rootfs/etc/init.d-posix/
	#before built located at: Firmware/ROMFS/px4fmu_common/init.d-posix/
	#First thing to notice is that this file for NuttX is much bigger than the one for posix
	#this script is run by the main px4 instance (an executable called px4, that can be found
	#at 'Firmware/build/px4_sitl_default/bin/' after you have built for that target)





